{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nconst useKeyPress = function (targetKey) {\n  _s();\n\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler(_ref) {\n    let {\n      key\n    } = _ref;\n\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = _ref2 => {\n    let {\n      key\n    } = _ref2;\n\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener(\"keydown\", downHandler);\n    document.addEventListener(\"keyup\", upHandler);\n    return () => {\n      document.removeEventListener(\"keydown\", downHandler);\n      document.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n  return keyPressed;\n};\n\n_s(useKeyPress, \"vmDSD7h68k9Z7B48/eX82jyokKU=\");\n\nexport default useKeyPress;","map":{"version":3,"sources":["/Users/eliottmorcillo/Documents/Projets/code-editor/src/hooks/useKeyPress.js"],"names":["React","useState","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","document","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,GAAG,UAAUC,SAAV,EAAqB;AAAA;;AACvC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,KAAD,CAA5C;;AAEA,WAASK,WAAT,OAA8B;AAAA,QAAT;AAAEC,MAAAA;AAAF,KAAS;;AAC5B,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF;;AAED,QAAMG,SAAS,GAAG,SAAa;AAAA,QAAZ;AAAED,MAAAA;AAAF,KAAY;;AAC7B,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAJD;;AAMAL,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCL,WAArC;AACAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCH,SAAnC;AAEA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCN,WAAxC;AACAI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCJ,SAAtC;AACD,KAHD;AAID,GARD;AAUA,SAAOJ,UAAP;AACD,CA1BD;;GAAMF,W;;AA4BN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst useKeyPress = function (targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener(\"keydown\", downHandler);\n    document.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      document.removeEventListener(\"keydown\", downHandler);\n      document.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress;\n"]},"metadata":{},"sourceType":"module"}